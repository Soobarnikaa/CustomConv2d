# -*- coding: utf-8 -*-
"""customconv2d.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cWE5ikss5iXSfH3ZX2vkv7sPiLZ1H1Wn
"""

import numpy as np

def conv2d(input, kernel, stride=1, padding=0):
    if padding > 0:
        input = np.pad(input, ((padding, padding), (padding, padding)), mode='constant')

    input_height, input_width = input.shape
    kernel_height, kernel_width = kernel.shape

    output_height = (input_height - kernel_height) // stride + 1
    output_width = (input_width - kernel_width) // stride + 1

    output = np.zeros((output_height, output_width))

    for i in range(output_height):
        for j in range(output_width):
            region = input[i*stride:i*stride+kernel_height, j*stride:j*stride+kernel_width]
            output[i, j] = np.sum(region * kernel)

    return output

if __name__ == "__main__":
    input_image = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    kernel = np.array([[1, 0], [0, -1]])
    stride = 1
    padding = 1

    output_image = conv2d(input_image, kernel, stride, padding)
    print("Output feature map:\n", output_image)